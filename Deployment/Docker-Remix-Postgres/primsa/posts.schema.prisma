model Newsletter {
  id String @id @default(cuid())
  author String
  articles Article[]
}

model Article {
  id     String @id @default(cuid())
  slug  String? @unique

  title String
  description String? @db.Text
  body  String @db.Text
  tags    String[]
  images  ArticleImage[]
  hasPoll Boolean @default(false)

  userId String
  author User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  isPublished   Boolean   @default(false)
  isPublishedAt DateTime?

  comments ArticleComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ArticleImage {
  id Int @id @default(cuid())
  url String
  height Float
  Width Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id Int @id @default(cuid())
  body String
  userId String
  user User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  articleId String
  article Article @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pollId String
  poll Poll @relation(fields: [pollId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("comments")
}

// model Comment {
//   id String @id @default(cuid())
//   content    String
//   poll       Poll      @relation(fields: [pollId], references: [id])
//   pollId     String    @map("poll_id")
//   authorName String    @map("author_name")
//   userId     String?   @map("user_id")

//   // postId String
//   // post Article @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   // userId String
//   // user User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
//   // body String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([id, pollId])
//   @@map("comments")
// }

model Voter {
  id        String    @id @default(cuid())
  name      String
  userId    String?   @map("user_id")
  poll      Poll      @relation(fields: [pollId], references: [id])
  pollId    String    @map("poll_id")
  votes     Vote[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("participants")
}

enum PollType {
  yesno
  chooseOne
}

model Poll {
  id String @id @default(cuid())
  title            String
  type             PollType @default(yesno)
  question           String
  deadline         DateTime?
  userId  String
  authorName User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  options PollOption[] @relation(onDelete: Cascade)
  votes            Vote[]
  voters     Voter[]

  pollMostVotedOptionId String? @map("poll_most_voted_option_id")
  pollMostVotedOption PollOption? @relation(fields: [pollMostVotedOptionId], references: [id], onDelete: SetNull)

  comments         Comment[]
  closed           Boolean       @default(false)
  notifications    Boolean       @default(false)
  deleted          Boolean       @default(false)
  deletedAt        DateTime?     @map("deleted_at")
  touchedAt        DateTime      @default(now()) @map("touched_at")
  participantUrlId String        @unique @map("participant_url_id")
  adminUrlId       String        @unique @map("admin_url_id")

  @@map("polls")
}

model PollOption {
  id        String    @id @default(cuid())
  value     String
  pollId    String    @map("poll_id")
  poll      Poll      @relation(fields: [pollId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  votes     Vote[]

  @@map("options")
}

model Vote {
  id            String      @id @default(cuid())
  voter   Voter[] @relation(fields: [voterId], references: [id], onDelete: Cascade)
  voterId String      @map("voter_id")
  option    PollOption      @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId      String      @map("option_id")
  poll          Poll        @relation(fields: [pollId], references: [id])
  pollId        String      @map("poll_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime?   @updatedAt @map("updated_at")
  @@map("votes")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String

  authoredKudos Kudo[]  @relation("AuthoredKudos")
  kudos         Kudo[]  @relation("RecievedKudos")
  profile       Profile
}

model Kudo {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  message     String
  createdAt   DateTime   @default(now())
  style       KudoStyle?
  author      User       @relation(references: [id], fields: [authorId], onDelete: Cascade, "AuthoredKudos")
  authorId    String     @db.ObjectId
  recipient   User       @relation(references: [id], fields: [recipientId], "RecievedKudos")
  recipientId String     @db.ObjectId
}

type Profile {
  firstName      String
  lastName       String
  department     Department? @default(MARKETING)
  profilePicture String?
}

type KudoStyle {
  backgroundColor Color @default(YELLOW)
  textColor       Color @default(WHITE)
  emoji           Emoji @default(THUMBSUP)
}

enum Emoji {
  THUMBSUP
  PARTY
  HANDSUP
}

enum Department {
  MARKETING
  SALES
  ENGINEERING
  HR
}

enum Color {
  RED
  GREEN
  YELLOW
  BLUE
  WHITE
}